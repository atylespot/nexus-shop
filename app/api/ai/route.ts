import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";
import { db } from "@/lib/db";

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();

    // Backward compatible params
    const { name, category, keyPoints, tone, language, apiKey } = body || {};

    // Business growth coach: analyze targets vs actuals and suggest actions
    if (body?.mode === 'growth-coach') {
      const key = body?.apiKey || process.env.OPENAI_API_KEY;
      const metrics = body?.metrics || {};
      const lang = body?.language || 'bn';

      // Build safe local fallback (works without API key)
      const buildFallback = () => {
        const monthlyTarget = Number(metrics?.monthlyTarget || 0);
        const soldToDate = Number(metrics?.soldToDate || 0);
        const remainingDays = Number(metrics?.remainingDays || 0);
        const gap = Math.max(0, monthlyTarget - soldToDate);
        const req = remainingDays > 0 ? Math.ceil(gap / remainingDays) : 0;
        const curAvg = Number(metrics?.currentAvgPerDay || 0);
        const status = curAvg >= (metrics?.requiredPerDay || 0) ? '‡¶ó‡ßç‡¶∞‡¶ø‡¶®' : (curAvg >= (metrics?.requiredPerDay || 0) * 0.7 ? '‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞' : '‡¶∞‡ßá‡¶°');
        const summary = `‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ${monthlyTarget} ‡¶á‡¶â‡¶®‡¶ø‡¶ü, ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø ${soldToDate}. ‡¶¨‡¶æ‡¶ï‡¶ø ${remainingDays} ‡¶¶‡¶ø‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‚âà ${req} ‡¶á‡¶â‡¶®‡¶ø‡¶ü ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞‡•§ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶æ‡¶∏: ${status}.`;
        const bullets = [
          `‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ó‡¶§‡¶ø: ${curAvg}/day ‡¶¨‡¶®‡¶æ‡¶Æ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®: ${metrics?.requiredPerDay || 0}/day`,
          `‡¶¨‡¶æ‡¶ï‡¶ø ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø: ${gap} ‡¶á‡¶â‡¶®‡¶ø‡¶ü`,
          `‡¶Æ‡¶æ‡¶∏: ${metrics?.month || ''} ${metrics?.year || ''}`
        ];
        const next = [
          '‡¶∂‡ßÄ‡¶∞‡ßç‡¶∑ ‡ß® ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá +‡ßß‡ß´% ‡¶¨‡¶æ‡¶ú‡ßá‡¶ü ‡¶ì ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡ßá‡¶ü‡¶ø‡¶≠ A/B ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®',
          '‡¶Ü‡¶ú‡¶ï‡ßá ‡ß¨-‡ßÆ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶´‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶Ö‡¶´‡¶æ‡¶∞ (‡¶´‡ßç‡¶∞‡¶ø/‡¶°‡¶ø‡¶∏‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá‡¶° ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø) ‡¶¶‡¶ø‡¶®',
          '‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶®/‡¶°‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶ú ‡¶ï‡¶∏‡ßç‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶§‡ßá ‡¶ï‡ßÅ‡¶∞‡¶ø‡ßü‡¶æ‡¶∞/‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú‡¶ø‡¶Ç ‡¶Ö‡¶™‡ßç‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®',
          '‡¶≤‡ßã ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá ‡¶ï‡¶™‡¶ø/Thumb ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
          '‡¶∏‡ßç‡¶ü‡¶ï/‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø SLA ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™ ‡¶ï‡¶∞‡ßá ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®'
        ];
        return { summary, bullets, next_actions: next };
      };

      // If no key, return local fallback instead of 400
      if (!key) {
        return NextResponse.json(buildFallback());
      }

      const openai = new OpenAI({ apiKey: key, dangerouslyAllowBrowser: false });

      const prompt = `‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶á-‡¶ï‡¶Æ‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ó‡ßç‡¶∞‡ßã‡¶• ‡¶ï‡ßã‡¶ö‡•§ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Æ‡ßá‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶¶‡¶æ‡¶ì ‡¶è‡¶¨‡¶Ç 3-6‡¶ü‡¶ø ‡¶ï‡¶∞‡ßç‡¶Æ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶® ‡¶¶‡¶æ‡¶ì‡•§

‡¶∏‡¶Æ‡¶∑‡ßç‡¶ü‡¶ø‡¶ó‡¶§ ‡¶Æ‡ßá‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏:
- ‡¶Æ‡¶æ‡¶∏: ${metrics?.month || 'N/A'} ${metrics?.year || ''}
- ‡¶¶‡¶ø‡¶®: ${metrics?.elapsedDays || 0}/${metrics?.daysInMonth || 0}
- ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü (units): ${metrics?.monthlyTarget || 0}
- ‡¶è‡¶ñ‡¶® ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶∏‡ßá‡¶≤ (units): ${metrics?.soldToDate || 0}
- ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶¶‡¶ø‡¶®: ${metrics?.remainingDays || 0}
- ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶ó‡¶§‡¶ø (units/day): ${metrics?.requiredPerDay || 0}
- ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ó‡ßú ‡¶ó‡¶§‡¶ø (units/day): ${metrics?.currentAvgPerDay || 0}
- ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶¨‡¶æ‡¶ú‡ßá‡¶ü (BDT): ${metrics?.monthlyBudget || 0}

‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü-‡¶≤‡ßá‡¶≠‡ßá‡¶≤ (‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§):
${Array.isArray(metrics?.products) ? metrics.products.slice(0, 10).map((p: any, i: number) => `${i+1}) ${p.name}: target(m)=${p.requiredMonthlyUnits||0}, target(d)=${p.requiredDailyUnits||0}, soldToDate=${p.soldToDate||0}`).join('\n') : 'N/A'}

‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø:
1) ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ó‡¶§‡¶ø‡¶∞ ‡¶§‡ßÅ‡¶≤‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶∞‡ßá‡¶°/‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞/‡¶ó‡ßç‡¶∞‡¶ø‡¶® ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶¶‡¶æ‡¶ì‡•§
2) ‡¶Ø‡¶¶‡¶ø ‡¶Ö‡¶´-‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶π‡ßü, ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶¶‡¶ø‡¶® ‡¶ß‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶¶‡¶æ‡¶ì‡•§
3) 3-6‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶¶‡¶æ‡¶ì (‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡¶∂‡¶®, ‡¶¨‡¶æ‡¶ú‡ßá‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶®, ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶®/‡¶°‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶ú ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤, ‡¶ï‡¶™‡¶ø/‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡ßá‡¶ü‡¶ø‡¶≠ A/B ‡¶ü‡ßá‡¶∏‡ßç‡¶ü, ‡¶°‡¶ø‡¶∏‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü/‡¶¨‡¶æ‡¶Æ‡ßç‡¶™ ‡¶Ö‡¶´‡¶æ‡¶∞, ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø-‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ú‡¶ø)‡•§
4) ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ JSON:
{"summary":"‡ß®-‡ß© ‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶Æ‡ßÇ‡¶≤ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ","bullets":["...","..."],"next_actions":["...","..."]}`;

      try {
        const res = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.4,
          max_tokens: 450
        });
        const text = res.choices[0]?.message?.content?.trim() || '{}';
        let json: any = {};
        try {
          const m = text.match(/\{[\s\S]*\}/);
          json = m ? JSON.parse(m[0]) : JSON.parse(text);
        } catch {
          // Minimal fallback using provided metrics
          const gap = (metrics?.monthlyTarget || 0) - (metrics?.soldToDate || 0);
          const req = metrics?.remainingDays ? Math.ceil(Math.max(0, gap) / metrics.remainingDays) : 0;
          json = {
            summary: `‡¶è ‡¶Æ‡¶æ‡¶∏‡ßá ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ${metrics?.monthlyTarget||0} ‡¶á‡¶â‡¶®‡¶ø‡¶ü‡•§ ‡¶è‡¶ñ‡¶® ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ${metrics?.soldToDate||0} ‡¶á‡¶â‡¶®‡¶ø‡¶ü ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ${req} ‡¶á‡¶â‡¶®‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá‡¶á ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶ß‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§`,
            bullets: [
              `‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ó‡¶§‡¶ø: ${metrics?.currentAvgPerDay||0}/day, ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®: ${metrics?.requiredPerDay||0}/day`,
              `‡¶¨‡¶æ‡¶ï‡¶ø ‡¶¶‡¶ø‡¶®: ${metrics?.remainingDays||0}, ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü: ${Math.max(0,gap)}`
            ],
            next_actions: [
              '‡¶∂‡ßÄ‡¶∞‡ßç‡¶∑ ‡ß® ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá ‡¶¨‡¶æ‡¶ú‡ßá‡¶ü +‡ßß‡ß´% ‡¶ì ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡ßá‡¶ü‡¶ø‡¶≠ A/B ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®',
              '‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶®/‡¶°‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶ú ‡¶ï‡¶∏‡ßç‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶§‡ßá ‡¶ï‡ßÅ‡¶∞‡¶ø‡ßü‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶ì ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú‡¶ø‡¶Ç ‡¶Ö‡¶™‡ßç‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®',
              '‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶Ö‡¶´‡¶æ‡¶∞ (‡¶´‡ßç‡¶∞‡¶ø ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø/‡¶¨‡¶æ‡¶Æ‡ßç‡¶™ ‡¶Ö‡¶´‡¶æ‡¶∞) ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®'
            ]
          };
        }
        return NextResponse.json({
          summary: json.summary || '',
          bullets: Array.isArray(json.bullets) ? json.bullets : [],
          next_actions: Array.isArray(json.next_actions) ? json.next_actions : []
        });
      } catch (e) {
        console.error('growth-coach AI error:', e);
        // Fallback gracefully with heuristic output
        return NextResponse.json(buildFallback());
      }
    }

    // New mode for landing header
    if (body?.mode === 'landing-header') {
      if (!apiKey) {
        return NextResponse.json({ error: "OpenAI API key required. Please add it in Settings ‚Üí General." }, { status: 400 });
      }
      if (!body?.product?.name) {
        return NextResponse.json({ error: 'product.name required' }, { status: 400 });
      }
      
      console.log('üöÄ AI API called for landing-header:', { productName: body.product.name });
      
      const openai = new OpenAI({ apiKey, dangerouslyAllowBrowser: false });
      const prompt = `‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶ï‡¶™‡¶ø‡¶∞‡¶æ‡¶á‡¶ü‡¶æ‡¶∞‡•§ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡ßá ‡ßß‡¶ü‡¶ø ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º Title (‡ß¨-‡ßß‡ß¶ ‡¶∂‡¶¨‡ßç‡¶¶) ‡¶è‡¶¨‡¶Ç ‡ßß‡¶ü‡¶ø Subtitle (‡ßß‡ß®-‡ß®‡ß¶ ‡¶∂‡¶¨‡ßç‡¶¶) ‡¶≤‡ßá‡¶ñ‡ßã‡•§

‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü: ${body.product.name}
‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏: ${body.product.image || 'N/A'}

‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ JSON format-‡¶è ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá:
{"title": "‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ñ‡ßã", "subtitle": "‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶æ‡¶¨‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ñ‡ßã"}`;
      
      try {
        const res = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.7,
          max_tokens: 200
        });
        
        const text = res.choices[0]?.message?.content?.trim() || '{}';
        console.log('üìù OpenAI raw response:', text);
        
        // Try to extract JSON from the response
        let json: any = {};
        try {
          // Find JSON-like content in the response
          const jsonMatch = text.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            json = JSON.parse(jsonMatch[0]);
          } else {
            // Fallback: try to parse the entire response
            json = JSON.parse(text);
          }
        } catch (parseError) {
          console.error('‚ùå JSON parse error:', parseError);
          // Fallback: create a simple title and subtitle
          json = {
            title: `${body.product.name} - ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ`,
            subtitle: `${body.product.name} ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶ú‡ßÄ‡¶¨‡¶®‡¶ï‡ßá ‡¶Ü‡¶∞‡¶ì ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®`
          };
        }
        
        console.log('‚úÖ Parsed JSON:', json);
        
        const result = {
          title: json.title || `${body.product.name} - ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ`,
          subtitle: json.subtitle || `${body.product.name} ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶ú‡ßÄ‡¶¨‡¶®‡¶ï‡ßá ‡¶Ü‡¶∞‡¶ì ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®`
        };
        
        console.log('üéØ Final result:', result);
        return NextResponse.json(result);
        
      } catch (openaiError) {
        console.error('üí• OpenAI API error:', openaiError);
        // Fallback response
        return NextResponse.json({
          title: `${body.product.name} - ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ`,
          subtitle: `${body.product.name} ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶ú‡ßÄ‡¶¨‡¶®‡¶ï‡ßá ‡¶Ü‡¶∞‡¶ì ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®`
        });
      }
    }

    // Payment instructions generation mode
    if (body?.mode === 'payment-instructions') {
      const { provider, number, accountType, language = 'bn', apiKey } = body || {};
      if (!provider || !number) {
        return NextResponse.json({ error: 'provider and number required' }, { status: 400 });
      }
      if (!apiKey) {
        return NextResponse.json({ error: "OpenAI API key required. Please add it in Settings ‚Üí General." }, { status: 400 });
      }
      const openai = new OpenAI({ apiKey, dangerouslyAllowBrowser: false });
      const provName = String(provider).toLowerCase();
      const flow = (String(accountType || 'Personal').toLowerCase() === 'merchant') ? 'Payment' : 'Send Money';
      const prompt = `‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶á-‡¶ï‡¶Æ‡¶æ‡¶∞‡ßç‡¶∏ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶è‡¶ú‡ßá‡¶®‡ßç‡¶ü‡•§ ${provName} ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡¶ø‡¶Ç ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ${flow} ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶§‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßá‡¶™-‡¶¨‡¶æ‡¶á-‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ ‡¶¶‡¶æ‡¶ì‡•§

‡¶∂‡¶∞‡ßç‡¶§:
- ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: ${number}
- ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ü‡¶æ‡¶á‡¶™: ${accountType || 'Personal'} (‡¶ü‡¶æ‡¶á‡¶™ Personal ‡¶π‡¶≤‡ßá 'Send Money' ‡¶´‡ßç‡¶≤‡ßã, Merchant ‡¶π‡¶≤‡ßá 'Payment' ‡¶´‡ßç‡¶≤‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã)
- ‡¶≠‡¶æ‡¶∑‡¶æ: ${language}
- ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶∏‡¶π‡¶ú, ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞/‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡¶ï‡ßç‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞‡¶≤‡¶ø ‡¶¶‡¶æ‡¶ì, ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏/‡¶®‡ßã‡¶ü ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßã‡•§

‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ JSON:
{"instructions":"1) ...\n2) ...\n3) ..."}`;
      try {
        const res = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.3,
          max_tokens: 300
        });
        const text = res.choices[0]?.message?.content?.trim() || '{}';
        let json: any = {};
        try {
          const jsonMatch = text.match(/\{[\s\S]*\}/);
          json = jsonMatch ? JSON.parse(jsonMatch[0]) : JSON.parse(text);
        } catch {
          json = { instructions: `${provName} ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá ‡¶ó‡¶ø‡ßü‡ßá ${flow} ‚Üí Number: ${number} ‚Üí Amount ‚Üí Reference/Order ID ‚Üí Submit` };
        }
        return NextResponse.json({ instructions: json.instructions });
      } catch (err) {
        console.error('AI payment-instructions error:', err);
        return NextResponse.json({ instructions: `${provName} ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá ‡¶ó‡¶ø‡ßü‡ßá ${flow} ‚Üí Number: ${number} ‚Üí Amount ‚Üí Reference/Order ID ‚Üí Submit` });
      }
    }

    // Product description generation mode
    if (body?.mode === 'product-description') {
      if (!apiKey) {
        return NextResponse.json({ error: "OpenAI API key required. Please add it in Settings ‚Üí General." }, { status: 400 });
      }
      if (!body?.product?.name) {
        return NextResponse.json({ error: 'product.name required' }, { status: 400 });
      }
      
      console.log('üöÄ AI API called for product-description:', { productName: body.product.name });
      
      const openai = new OpenAI({ apiKey, dangerouslyAllowBrowser: false });
      const prompt = `‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û‡•§ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶ï‡ßá‡¶® ‡¶ï‡ßá‡¶â ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶ø‡¶®‡¶¨‡ßá ‡¶§‡¶æ‡¶∞ ‡ßß‡ß¶‡¶ü‡¶ø ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßã‡•§

‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü: ${body.product.name}

‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ JSON format-‡¶è ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá:
{"description": "1. [‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡¶£]\n2. [‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡¶Ø‡¶º ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡¶£]\n3. [‡¶§‡ßÉ‡¶§‡ßÄ‡¶Ø‡¶º ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡¶£]\n4. [‡¶ö‡¶§‡ßÅ‡¶∞‡ßç‡¶• ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡¶£]\n5. [‡¶™‡¶û‡ßç‡¶ö‡¶Æ ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡¶£]\n6. [‡¶∑‡¶∑‡ßç‡¶† ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡¶£]\n7. [‡¶∏‡¶™‡ßç‡¶§‡¶Æ ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡¶£]\n8. [‡¶Ö‡¶∑‡ßç‡¶ü‡¶Æ ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡¶£]\n9. [‡¶®‡¶¨‡¶Æ ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡¶£]\n10. [‡¶¶‡¶∂‡¶Æ ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡¶£]"}

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Ø‡ßá‡¶® ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ, ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø ‡¶è‡¶¨‡¶Ç ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡¶æ‡¶¨‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶´‡ßã‡¶ï‡¶æ‡¶∏ ‡¶ï‡¶∞‡ßá‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶π‡ßã‡¶ï‡•§`;
      
      try {
        const res = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.7,
          max_tokens: 500
        });
        
        const text = res.choices[0]?.message?.content?.trim() || '{}';
        console.log('üìù OpenAI raw response:', text);
        
        // Try to extract JSON from the response
        let json: any = {};
        try {
          // Find JSON-like content in the response
          const jsonMatch = text.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            json = JSON.parse(jsonMatch[0]);
          } else {
            // Fallback: try to parse the entire response
            json = JSON.parse(text);
          }
        } catch (parseError) {
          console.error('‚ùå JSON parse error:', parseError);
          // Fallback: create a simple description
          json = {
            description: `1. ${body.product.name} ‡¶è‡¶∞ ‡¶Ö‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ó‡ßÅ‡¶£‡¶Æ‡¶æ‡¶®\n2. ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶Ø‡ßã‡¶ó‡¶ø‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡ßá ‡¶∏‡ßá‡¶∞‡¶æ ‡¶Æ‡¶æ‡¶®\n3. ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏\n4. ‡ß®‡ß™/‡ß≠ ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü\n5. ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶ü‡¶ø ‡¶ó‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶®‡ßç‡¶ü‡¶ø\n6. ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá ‡¶∏‡¶π‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ‡¶ú‡¶®‡¶ï\n7. ‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞\n8. ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂‡¶¨‡¶æ‡¶®‡ßç‡¶ß‡¶¨ ‡¶â‡¶™‡¶ï‡¶∞‡¶£\n9. ‡¶¨‡¶π‡ßÅ‡¶Æ‡ßÅ‡¶ñ‡ßÄ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ\n10. ‡¶∏‡¶®‡ßç‡¶§‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø ‡¶ó‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶®‡ßç‡¶ü‡¶ø`
          };
        }
        
        console.log('‚úÖ Parsed JSON:', json);
        
        const result = {
          description: json.description || `1. ${body.product.name} ‡¶è‡¶∞ ‡¶Ö‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ó‡ßÅ‡¶£‡¶Æ‡¶æ‡¶®\n2. ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶Ø‡ßã‡¶ó‡¶ø‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡ßá ‡¶∏‡ßá‡¶∞‡¶æ ‡¶Æ‡¶æ‡¶®\n3. ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏\n4. ‡ß®‡ß™/‡ß≠ ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü\n5. ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶ü‡¶ø ‡¶ó‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶®‡ßç‡¶ü‡¶ø\n6. ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá ‡¶∏‡¶π‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ‡¶ú‡¶®‡¶ï\n7. ‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞\n8. ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂‡¶¨‡¶æ‡¶®‡ßç‡¶ß‡¶¨ ‡¶â‡¶™‡¶ï‡¶∞‡¶£\n9. ‡¶¨‡¶π‡ßÅ‡¶Æ‡ßÅ‡¶ñ‡ßÄ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ\n10. ‡¶∏‡¶®‡ßç‡¶§‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø ‡¶ó‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶®‡ßç‡¶ü‡¶ø`
        };
        
        console.log('üéØ Final result:', result);
        return NextResponse.json(result);
        
      } catch (openaiError) {
        console.error('üí• OpenAI API error:', openaiError);
        // Fallback response
        return NextResponse.json({
          description: `1. ${body.product.name} ‡¶è‡¶∞ ‡¶Ö‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ó‡ßÅ‡¶£‡¶Æ‡¶æ‡¶®\n2. ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶Ø‡ßã‡¶ó‡¶ø‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡ßá ‡¶∏‡ßá‡¶∞‡¶æ ‡¶Æ‡¶æ‡¶®\n3. ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏\n4. ‡ß®‡ß™/‡ß≠ ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü\n5. ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶ü‡¶ø ‡¶ó‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶®‡ßç‡¶ü‡¶ø\n6. ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá ‡¶∏‡¶π‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ‡¶ú‡¶®‡¶ï\n7. ‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞\n8. ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂‡¶¨‡¶æ‡¶®‡ßç‡¶ß‡¶¨ ‡¶â‡¶™‡¶ï‡¶∞‡¶£\n9. ‡¶¨‡¶π‡ßÅ‡¶Æ‡ßÅ‡¶ñ‡ßÄ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ\n10. ‡¶∏‡¶®‡ßç‡¶§‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø ‡¶ó‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶®‡ßç‡¶ü‡¶ø`
        });
      }
    }

    // Product features generation mode
    if (body?.mode === 'product-features') {
      if (!apiKey) {
        return NextResponse.json({ error: "OpenAI API key required. Please add it in Settings ‚Üí General." }, { status: 400 });
      }
      if (!body?.product?.name) {
        return NextResponse.json({ error: 'product.name required' }, { status: 400 });
      }
      
      console.log('üöÄ AI API called for product-features:', { productName: body.product.name });
      
      const openai = new OpenAI({ apiKey, dangerouslyAllowBrowser: false });
      const prompt = `‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û‡•§ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡ß¨‡¶ü‡¶ø ‡¶Æ‡ßÇ‡¶≤ ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßã‡•§

‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü: ${body.product.name}

‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ JSON format-‡¶è ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá:
{"features": "1. [‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø]\n2. [‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡¶Ø‡¶º ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø]\n3. [‡¶§‡ßÉ‡¶§‡ßÄ‡¶Ø‡¶º ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø]\n4. [‡¶ö‡¶§‡ßÅ‡¶∞‡ßç‡¶• ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø]\n5. [‡¶™‡¶û‡ßç‡¶ö‡¶Æ ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø]\n6. [‡¶∑‡¶∑‡ßç‡¶† ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø]"}

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§`;
      
      try {
        const res = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.7,
          max_tokens: 300
        });
        
        const text = res.choices[0]?.message?.content?.trim() || '{}';
        console.log('üìù OpenAI raw response:', text);
        
        // Try to extract JSON from the response
        let json: any = {};
        try {
          // Find JSON-like content in the response
          const jsonMatch = text.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            json = JSON.parse(jsonMatch[0]);
          } else {
            // Fallback: try to parse the entire response
            json = JSON.parse(text);
          }
        } catch (parseError) {
          console.error('‚ùå JSON parse error:', parseError);
          // Fallback: create simple features
          json = {
            features: `1. ‡¶â‡¶ö‡ßç‡¶ö ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶â‡¶™‡¶ï‡¶∞‡¶£\n2. ‡¶¶‡ßÄ‡¶∞‡ßç‡¶ò‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞\n3. ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá ‡¶∏‡¶π‡¶ú\n4. ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®\n5. ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶Ø‡ßã‡¶ó‡¶ø‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø\n6. ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶∏‡ßç‡¶§ ‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°`
          };
        }
        
        console.log('‚úÖ Parsed JSON:', json);
        
        const result = {
          features: json.features || `1. ‡¶â‡¶ö‡ßç‡¶ö ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶â‡¶™‡¶ï‡¶∞‡¶£\n2. ‡¶¶‡ßÄ‡¶∞‡ßç‡¶ò‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞\n3. ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá ‡¶∏‡¶π‡¶ú\n4. ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®\n5. ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶Ø‡ßã‡¶ó‡¶ø‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø\n6. ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶∏‡ßç‡¶§ ‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°`
        };
        
        console.log('üéØ Final result:', result);
        return NextResponse.json(result);
        
      } catch (openaiError) {
        console.error('üí• OpenAI API error:', openaiError);
        // Fallback response
        return NextResponse.json({
          features: `1. ‡¶â‡¶ö‡ßç‡¶ö ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶â‡¶™‡¶ï‡¶∞‡¶£\n2. ‡¶¶‡ßÄ‡¶∞‡ßç‡¶ò‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞\n3. ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá ‡¶∏‡¶π‡¶ú\n4. ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®\n5. ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶Ø‡ßã‡¶ó‡¶ø‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø\n6. ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶∏‡ßç‡¶§ ‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°`
        });
      }
    }

    // Legacy description generation
    if (!name) {
      return NextResponse.json({ error: "name required" }, { status: 400 });
    }

    if (!apiKey) {
      return NextResponse.json({ 
        error: "OpenAI API key required. Please add it in Settings ‚Üí General." 
      }, { status: 400 });
    }

    const openai = new OpenAI({ apiKey, dangerouslyAllowBrowser: false });

    const prompt = `
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶á-‡¶ï‡¶Æ‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶™‡¶ø‡¶∞‡¶æ‡¶á‡¶ü‡¶æ‡¶∞‡•§ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º SEO-‡¶´‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶≤‡¶ø, 80-120 ‡¶∂‡¶¨‡ßç‡¶¶‡ßá‡¶∞ ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ ‡¶≤‡ßá‡¶ñ‡ßã‡•§
- ‡¶®‡¶æ‡¶Æ: ${name}
- ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø: ${category ?? "General"}
- Key points: ${keyPoints?.join(", ") ?? "N/A"}
- ‡¶ü‡ßã‡¶®: ${tone}
- Avoid medical/false claims. Keep scannable.
‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü: ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶ö‡ßç‡¶õ‡ßá‡¶¶, ‡¶∂‡ßá‡¶∑‡ßá 3-5‡¶ü‡¶ø bullet key features‡•§
    `;
    const res = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 300,
      temperature: 0.7
    });
    const description = res.choices[0]?.message?.content?.trim();
    if (!description) {
      return NextResponse.json({ error: "Failed to generate description. Please try again." }, { status: 500 });
    }
    return NextResponse.json({ description });
  } catch (error) {
    console.error('AI API Error:', error);
    if (error instanceof SyntaxError) {
      return NextResponse.json({ error: "Invalid request format. Please check your input." }, { status: 400 });
    }
    if (error instanceof Error) {
      if (error.message.includes('API key')) {
        return NextResponse.json({ error: "Invalid OpenAI API key. Please check your configuration." }, { status: 401 });
      }
      if (error.message.includes('rate limit')) {
        return NextResponse.json({ error: "Rate limit exceeded. Please try again later." }, { status: 429 });
      }
      if (error.message.includes('quota')) {
        return NextResponse.json({ error: "OpenAI quota exceeded. Please check your account." }, { status: 429 });
      }
    }
    return NextResponse.json({ error: "Internal server error. Please try again later." }, { status: 500 });
  }

  // Business summary: analyze profit/cost metrics and suggest actions
  if (body?.mode === 'business-summary') {
    const dbKey = await db.chatBotSetting.findFirst({ select: { openaiApiKey: true } }).catch(() => null);
    const key = body?.apiKey || process.env.OPENAI_API_KEY || dbKey?.openaiApiKey || undefined;
    const m = body?.metrics || {};

    // Historical context (last 60 days vs previous 60 days) to strengthen local analysis
    const hist = async () => {
      try {
        const now = new Date();
        const since60 = new Date(now.getTime() - 60 * 24 * 3600 * 1000);
        const since120 = new Date(now.getTime() - 120 * 24 * 3600 * 1000);
        const last = await db.order.findMany({ where: { status: 'delivered', createdAt: { gte: since60 } } });
        const prev = await db.order.findMany({ where: { status: 'delivered', createdAt: { gte: since120, lt: since60 } } });
        const sum = (arr: any[], f: (x: any) => number) => arr.reduce((s, x) => s + (f(x) || 0), 0);
        const revLast = sum(last, o => o.total || 0);
        const revPrev = sum(prev, o => o.total || 0);
        const cntLast = last.length || 0;
        const cntPrev = prev.length || 0;
        const aovLast = cntLast > 0 ? revLast / cntLast : 0;
        const aovPrev = cntPrev > 0 ? revPrev / cntPrev : 0;
        const growth = revPrev > 0 ? ((revLast - revPrev) / revPrev) * 100 : (revLast > 0 ? 100 : 0);
        const aovTrend = aovPrev > 0 ? ((aovLast - aovPrev) / aovPrev) * 100 : (aovLast > 0 ? 100 : 0);
        return { revLast, revPrev, cntLast, cntPrev, aovLast, aovPrev, growth, aovTrend };
      } catch {
        return null;
      }
    };
    const histData = await hist();

    const fallback = () => {
      const revenue = Number(m.revenue || 0);
      const cogs = Number(m.cogs || 0);
      const delivery = Number(m.deliveryCost || 0);
      const others = Number(m.otherExpenses || 0);
      const returnsDamages = Number(m.returnsDamages || 0);
      const net = Number(m.netProfit || (revenue - (cogs + delivery + others + returnsDamages)));
      const pct = revenue > 0 ? (net / revenue) * 100 : 0;
      const gm = revenue - cogs;
      const gmPct = revenue > 0 ? (gm / revenue) * 100 : 0;
      const deliveryPct = revenue > 0 ? (delivery / revenue) * 100 : 0;
      const returnsPct = revenue > 0 ? (returnsDamages / revenue) * 100 : 0;
      const othersPct = revenue > 0 ? (others / revenue) * 100 : 0;

      const trendTxt = histData ? ` | ‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶° (‡ß¨‡ß¶ ‡¶¶‡¶ø‡¶®‡ßá): ‡¶∞‡ßá‡¶≠‡¶ø‡¶®‡¶ø‡¶â ${histData.growth.toFixed(1)}%, AOV ${histData.aovTrend.toFixed(1)}%` : '';
      const summary = `‡¶è‡¶á ‡¶Æ‡¶æ‡¶∏‡ßá ‡¶∞‡ßá‡¶≠‡¶ø‡¶®‡¶ø‡¶â ${revenue.toFixed(0)}, ‡¶ó‡ßç‡¶∞‡¶∏ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ú‡¶ø‡¶® ${gm.toFixed(0)} (${gmPct.toFixed(1)}%), ‡¶®‡ßá‡¶ü ${net.toFixed(0)} (${pct.toFixed(1)}%). ‡¶ï‡¶∏‡ßç‡¶ü ‡¶¨‡ßç‡¶∞‡ßá‡¶ï‡¶°‡¶æ‡¶â‡¶®: ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ${delivery.toFixed(0)} (${deliveryPct.toFixed(1)}%), ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶®/‡¶°‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶ú ${returnsDamages.toFixed(0)} (${returnsPct.toFixed(1)}%), ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ${others.toFixed(0)} (${othersPct.toFixed(1)}%).${trendTxt}`;

      const bullets: string[] = [];
      if (gmPct < 30) bullets.push('‡¶ó‡ßç‡¶∞‡¶∏ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ú‡¶ø‡¶® ‡¶ï‡¶Æ ‚Äî ‡¶ï‡ßá‡¶®‡¶æ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø/‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶∏‡¶ø‡¶Ç ‡¶™‡ßÅ‡¶®‡¶∞‡ßç‡¶¨‡¶ø‡¶¨‡ßá‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‚â• 35-40%)');
      if (deliveryPct > 10) bullets.push('‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶ï‡¶∏‡ßç‡¶ü ‡¶¨‡ßá‡¶∂‡¶ø ‚Äî ‡¶ï‡ßÅ‡¶∞‡¶ø‡ßü‡¶æ‡¶∞ ‡¶∞‡ßá‡¶ü ‡¶®‡ßá‡¶ó‡ßã‡¶∂‡¶ø‡ßü‡ßá‡¶ü/‡¶è‡¶∞‡¶ø‡ßü‡¶æ-‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú‡¶ø‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®');
      if (returnsPct > 5) bullets.push('‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶®/‡¶°‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶ú ‡¶¨‡ßá‡¶∂‡¶ø ‚Äî ‡¶ï‡¶™‡¶ø/‡¶õ‡¶¨‡¶ø/‡¶∏‡¶æ‡¶á‡¶ú-‡¶ó‡¶æ‡¶á‡¶°/QA ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú‡¶ø‡¶Ç ‡¶∂‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®');
      if (othersPct > 8) bullets.push('‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶ñ‡¶∞‡¶ö ‡¶¨‡ßá‡¶∂‡¶ø ‚Äî ‡¶ï‡¶Æ ROI ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™‡ßá‡¶á‡¶® pause ‡¶ì ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∏ ‡¶∞‡¶ø‡¶≠‡¶ø‡¶â ‡¶ï‡¶∞‡ßÅ‡¶®');
      if (histData) {
        if (histData.growth < 0) bullets.push('‡¶∏‡¶æ‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï ‡¶∞‡ßá‡¶≠‡¶ø‡¶®‡¶ø‡¶â ‡¶°‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶° ‚Äî ‡¶ü‡¶™-‡¶´‡¶æ‡¶®‡ßá‡¶≤ ‡¶¨‡¶æ‡¶ú‡ßá‡¶ü ‡¶ì ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç ‡¶¨‡¶æ‡¶°‡¶º‡¶æ‡¶®');
        if (histData.aovTrend < 0) bullets.push('AOV ‡¶ï‡¶Æ‡¶õ‡ßá ‚Äî ‡¶¨‡¶æ‡¶®‡ßç‡¶°‡¶≤/‡¶¨‡¶æ‡¶Æ‡ßç‡¶™ ‡¶Ö‡¶´‡¶æ‡¶∞, ‡¶´‡ßç‡¶∞‡¶ø ‡¶∂‡¶ø‡¶™ ‡¶•‡ßç‡¶∞‡ßá‡¶∂‡¶π‡ßã‡¶≤‡ßç‡¶° ‡¶¨‡¶æ‡¶°‡¶º‡¶æ‡¶®');
      }
      if (bullets.length === 0) bullets.push('‡¶Æ‡ßã‡¶ü‡¶æ‡¶Æ‡ßÅ‡¶ü‡¶ø ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø‡¶ï‡¶∞ ‚Äî ‡¶â‡¶ö‡ßç‡¶ö ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá ‡¶¨‡¶æ‡¶ú‡ßá‡¶ü ‡¶∏‡ßç‡¶ï‡ßá‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®');

      const next = [
        '‡¶∂‡ßÄ‡¶∞‡ßç‡¶∑ ‡ß®-‡ß© ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá +‡ßß‡ß´% ‡¶¨‡¶æ‡¶ú‡ßá‡¶ü ‡¶ì ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡ßá‡¶ü‡¶ø‡¶≠ A/B ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶¨‡¶æ‡¶Æ‡ßç‡¶™ ‡¶Ö‡¶´‡¶æ‡¶∞/‡¶¨‡¶æ‡¶®‡ßç‡¶°‡¶≤ ‡¶¶‡¶ø‡ßü‡ßá AOV ‡¶¨‡¶æ‡ßú‡¶æ‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶´‡ßç‡¶∞‡¶ø ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶•‡ßç‡¶∞‡ßá‡¶∂‡¶π‡ßã‡¶≤‡ßç‡¶°)',
        '‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶Æ‡¶æ‡¶§‡ßá PDP-‡¶§‡ßá USP/‡¶∏‡¶æ‡¶á‡¶ú-‡¶ó‡¶æ‡¶á‡¶° ‡¶ì ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨ ‡¶õ‡¶¨‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶ï‡ßÅ‡¶∞‡¶ø‡ßü‡¶æ‡¶∞ SLA ‡¶∞‡¶ø‡¶≠‡¶ø‡¶â ‡¶ì ‡¶ú‡ßã‡¶®‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶Ö‡¶™‡ßç‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶≤‡ßã ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ú‡¶ø‡¶® SKU-‡¶§‡ßá ‡¶®‡ßç‡¶Ø‡ßÇ‡¶®‡¶§‡¶Æ ‡¶™‡ßç‡¶∞‡¶´‡¶ø‡¶ü ‡¶•‡ßç‡¶∞‡ßá‡¶∂‡¶π‡ßã‡¶≤‡ßç‡¶° ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®'
      ];
      return { summary, bullets, next_actions: next, percent: Number(pct.toFixed(1)) };
    };

    if (!key) {
      return NextResponse.json(fallback());
    }

    const openai = new OpenAI({ apiKey: key, dangerouslyAllowBrowser: false });
    const prompt = `‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶∏‡¶ø‡¶è‡¶´‡¶ì/‡¶ó‡ßç‡¶∞‡ßã‡¶• ‡¶ï‡ßã‡¶ö‡•§ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶ø‡¶ú‡¶®‡ßá‡¶∏ ‡¶Æ‡ßá‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ì ‡¶ï‡¶∞‡ßç‡¶Æ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ (‡ß©-‡ß¨‡¶ü‡¶ø) ‡¶¶‡¶æ‡¶ì‡•§

‡¶Æ‡ßá‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏:
- Revenue: ${m.revenue}
- COGS: ${m.cogs}
- Delivery: ${m.deliveryCost}
- Other Expenses: ${m.otherExpenses}
- Returns/Damages: ${m.returnsDamages}
- Net Profit: ${m.netProfit}
- Net Profit %: ${m.netProfitPct}

‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶ï‡ßá‡¶¨‡¶≤ JSON:
{"summary":"‡ß®-‡ß™ ‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶ï‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá","bullets":["key insight 1","key insight 2"],"next_actions":["action 1","action 2"],"percent":NUMBER}`;

    try {
      const res = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.4,
        max_tokens: 400
      });
      const text = res.choices[0]?.message?.content?.trim() || '{}';
      let json: any = {};
      try {
        const m = text.match(/\{[\s\S]*\}/);
        json = m ? JSON.parse(m[0]) : JSON.parse(text);
      } catch {
        json = fallback();
      }
      const fb = fallback();
      return NextResponse.json({
        summary: json.summary || fb.summary,
        bullets: Array.isArray(json.bullets) && json.bullets.length ? json.bullets : fb.bullets,
        next_actions: Array.isArray(json.next_actions) && json.next_actions.length ? json.next_actions : fb.next_actions,
        percent: typeof json.percent === 'number' ? json.percent : fb.percent
      });
    } catch (e) {
      console.error('business-summary AI error:', e);
      return NextResponse.json(fallback());
    }
  }
}
