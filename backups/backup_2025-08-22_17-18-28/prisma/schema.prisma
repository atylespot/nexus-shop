generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  slug      String     @unique
  imageUrl  String?
  parentId  Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  Product[]
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  slug          String         @unique
  description   String?
  aiDescription String?
  buyPrice      Float
  regularPrice  Float
  salePrice     Float?
  currency      String         @default("BDT")
  sku           String?        @unique
  status        String         @default("DRAFT")
  categoryId    Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  inventory     Inventory?
  orderItems    OrderItem[]
  category      Category       @relation(fields: [categoryId], references: [id])
  images        ProductImage[]
  purchases     ProductPurchase[]
  landingPages  LandingPage[]
  landingOrders LandingPageOrder[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  alt       String?
  order     Int     @default(0)
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Inventory {
  id                Int     @id @default(autoincrement())
  productId         Int     @unique
  quantity          Int     @default(0)
  lowStockThreshold Int     @default(2)
  product           Product @relation(fields: [productId], references: [id])
}

model CourierSetting {
  id        Int      @id @default(autoincrement())
  apiKey    String
  secretKey String
  baseUrl   String   @default("https://portal.packzy.com/api/v1")
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BDCourierSetting {
  id        Int      @id @default(autoincrement())
  apiKey    String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourierOrder {
  id              Int      @id @default(autoincrement())
  orderId         Int      @unique
  consignmentId   String?
  trackingCode    String?
  courierStatus   String   @default("pending")
  courierNote     String?
  deliveryCharge  Float?
  courierResponse Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order    @relation(fields: [orderId], references: [id])
}

model Order {
  id             Int           @id @default(autoincrement())
  orderNo        String        @unique
  customerName   String?
  userEmail      String?
  phone          String?
  status         String        @default("processing")
  paymentStatus  String        @default("UNPAID")
  shippingMethod String?
  shippingCost   Float?
  subtotal       Float
  total          Float
  currency       String        @default("BDT")
  fbEventId      String?
  ttEventId      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  address        String?
  district       String?
  courierOrder   CourierOrder?
  items          OrderItem[]
}

// New simplified order model for landing pages
model LandingPageOrder {
  id             Int      @id @default(autoincrement())
  customerName   String
  customerPhone  String
  customerAddress String
  productId      Int
  productName    String
  productPrice   Float
  deliveryCharge Float    @default(0)
  totalAmount    Float
  deliveryArea   String
  status         String   @default("processing") // processing, shipped, delivered, cancelled
  landingPageId  Int
  orderDate      DateTime @default(now())
  paymentMethod  String   @default("cash_on_delivery")
  product        Product  @relation(fields: [productId], references: [id])
  history        OrderHistory[]
}

model OrderHistory {
  id         Int      @id @default(autoincrement())
  orderId    Int
  status     String
  statusDate DateTime @default(now())
  notes      String?
  order      LandingPageOrder @relation(fields: [orderId], references: [id])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
}

model PixelSetting {
  id              Int      @id @default(autoincrement())
  fbPixelId       String?
  fbAccessToken   String?
  fbTestEventCode String?
  ttPixelId       String?
  ttAccessToken   String?
  enabled         Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SiteSetting {
  id        Int      @id @default(autoincrement())
  header    Json?
  banner    Json?
  footer    Json?
  general   Json?
  payment   Json?
  shipping  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailSetting {
  id        Int      @id @default(autoincrement())
  host      String?
  port      Int?
  user      String?
  pass      String?
  from      String?
  isActive  Boolean  @default(false)
  provider  String   @default("SMTP") // SMTP | SENDGRID
  apiKey    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LandingPage {
  id                Int      @id @default(autoincrement())
  slug              String   @unique
  title             String
  subtitle          String?
  productId         Int
  headerImage       String?
  videoUrl          String?
  productDescription String?
  regularPrice      String?
  discountPrice     String?
  productImages     Json?
  productFeatures   String?
  customerReviews   Json?
  shippingAreas     Json?
  freeDelivery      Boolean @default(false)
  blocks            Json?
  viewCount         Int    @default(0)
  status            String   @default("draft")
  pixelIds          Json?
  publishedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  product           Product  @relation(fields: [productId], references: [id])
}

model ProductPurchase {
  id         Int       @id @default(autoincrement())
  productId  Int
  quantity   Int
  unitPrice  Float
  currency   String    @default("BDT")
  status     String    @default("PENDING") // PENDING | APPROVED | REJECTED
  note       String?
  createdAt  DateTime  @default(now())
  approvedAt DateTime?
  product    Product   @relation(fields: [productId], references: [id])
}

model OtherExpense {
  id         Int       @id @default(autoincrement())
  title      String
  category   String?
  amount     Float
  currency   String    @default("BDT")
  date       DateTime  @default(now())
  status     String    @default("PENDING") // PENDING | APPROVED | REJECTED
  note       String?
  createdBy  String
  createdAt  DateTime  @default(now())
  approvedAt DateTime?
}

model BudgetEntry {
  id           Int      @id @default(autoincrement())
  month        String
  year         Int      @default(2025)
  expenseType  String
  amount       Float
  currency     String   @default("BDT")
  note         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AdProductEntry {
  id                 Int      @id @default(autoincrement())
  month              String
  year               Int      @default(2025)
  productId          Int?
  productName        String
  productImage       String?
  buyingPrice        Float
  sellingPrice       Float?
  fbAdCost           Float
  deliveryCost       Float
  returnParcelQty    Int      @default(0)
  returnCost         Float    @default(0)
  damagedProductQty  Int      @default(0)
  damagedCost        Float    @default(0)
  monthlyBudget      Float    @default(0)
  desiredProfitPct   Float?
  requiredMonthlyUnits Int?
  requiredDailyUnits   Int?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  sellingTargets     SellingTargetEntry[]
}

model SellingTargetEntry {
  id                Int             @id @default(autoincrement())
  adProductEntryId  Int
  date              String          // Format: "YYYY-MM-DD"
  targetUnits       Int             @default(0)
  soldUnits         Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  adProductEntry    AdProductEntry  @relation(fields: [adProductEntryId], references: [id])
  
  @@unique([adProductEntryId, date])
}

// Authorization & User Management
model Role {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  rolePermissions RolePermission[]
  users           AppUser[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Permission {
  id         Int               @id @default(autoincrement())
  resource   String
  action     String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  roleLinks  RolePermission[]
  userLinks  UserPermission[]
  @@unique([resource, action])
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  allowed      Boolean    @default(true)
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  @@unique([roleId, permissionId])
}

model AppUser {
  id              Int              @id @default(autoincrement())
  name            String
  email           String           @unique
  status          String           @default("ACTIVE")
  roleId          Int?
  managerId       Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  role            Role?            @relation(fields: [roleId], references: [id])
  manager         AppUser?         @relation("ManagerToUsers", fields: [managerId], references: [id])
  subordinates    AppUser[]        @relation("ManagerToUsers")
  userPermissions UserPermission[]
  // Auth fields
  userId         String?           @unique
  passwordHash   String?
  loginSlug      String?           @unique
  phone         String?
  avatarUrl     String?
}

model UserPermission {
  id           Int        @id @default(autoincrement())
  userId       Int
  permissionId Int
  effect       String     @default("ALLOW") // ALLOW | DENY
  user         AppUser    @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  @@unique([userId, permissionId])
}
