import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();

    // Backward compatible params
    const { name, category, keyPoints, tone, language, apiKey } = body || {};

    // New mode for landing header
    if (body?.mode === 'landing-header') {
      if (!apiKey) {
        return NextResponse.json({ error: "OpenAI API key required. Please add it in Settings тЖТ General." }, { status: 400 });
      }
      if (!body?.product?.name) {
        return NextResponse.json({ error: 'product.name required' }, { status: 400 });
      }
      
      console.log('ЁЯЪА AI API called for landing-header:', { productName: body.product.name });
      
      const openai = new OpenAI({ apiKey, dangerouslyAllowBrowser: false });
      const prompt = `рждрзБржорж┐ ржПржХржЬржи ржХржкрж┐рж░рж╛ржЗржЯрж╛рж░ред ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ рждржерзНржп ржжрзЗржЦрзЗ рззржЯрж┐ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ Title (рзм-рззрзж рж╢ржмрзНржж) ржПржмржВ рззржЯрж┐ Subtitle (рззрзи-рзирзж рж╢ржмрзНржж) рж▓рзЗржЦрзЛред

ржкрзНрж░рзЛржбрж╛ржХрзНржЯ: ${body.product.name}
ржЫржмрж┐рж░ рж░рзЗржлрж╛рж░рзЗржирзНрж╕: ${body.product.image || 'N/A'}

ржЖржЙржЯржкрзБржЯ рж╢рзБржзрзБржорж╛рждрзНрж░ JSON format-ржП ржжрж┐рждрзЗ рж╣ржмрзЗ:
{"title": "ржПржЦрж╛ржирзЗ ржЯрж╛ржЗржЯрзЗрж▓ рж▓рж┐ржЦрзЛ", "subtitle": "ржПржЦрж╛ржирзЗ рж╕рж╛ржмржЯрж╛ржЗржЯрзЗрж▓ рж▓рж┐ржЦрзЛ"}`;
      
      try {
        const res = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.7,
          max_tokens: 200
        });
        
        const text = res.choices[0]?.message?.content?.trim() || '{}';
        console.log('ЁЯУЭ OpenAI raw response:', text);
        
        // Try to extract JSON from the response
        let json: any = {};
        try {
          // Find JSON-like content in the response
          const jsonMatch = text.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            json = JSON.parse(jsonMatch[0]);
          } else {
            // Fallback: try to parse the entire response
            json = JSON.parse(text);
          }
        } catch (parseError) {
          console.error('тЭМ JSON parse error:', parseError);
          // Fallback: create a simple title and subtitle
          json = {
            title: `${body.product.name} - ржирждрзБржи ржЕржнрж┐ржЬрзНржЮрждрж╛`,
            subtitle: `${body.product.name} ржПрж░ рж╕рж╛ржерзЗ ржЖржкржирж╛рж░ ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржЬрзАржмржиржХрзЗ ржЖрж░ржУ ржЙржирзНржиржд ржХрж░рзБржи`
          };
        }
        
        console.log('тЬЕ Parsed JSON:', json);
        
        const result = {
          title: json.title || `${body.product.name} - ржирждрзБржи ржЕржнрж┐ржЬрзНржЮрждрж╛`,
          subtitle: json.subtitle || `${body.product.name} ржПрж░ рж╕рж╛ржерзЗ ржЖржкржирж╛рж░ ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржЬрзАржмржиржХрзЗ ржЖрж░ржУ ржЙржирзНржиржд ржХрж░рзБржи`
        };
        
        console.log('ЁЯОп Final result:', result);
        return NextResponse.json(result);
        
      } catch (openaiError) {
        console.error('ЁЯТе OpenAI API error:', openaiError);
        // Fallback response
        return NextResponse.json({
          title: `${body.product.name} - ржирждрзБржи ржЕржнрж┐ржЬрзНржЮрждрж╛`,
          subtitle: `${body.product.name} ржПрж░ рж╕рж╛ржерзЗ ржЖржкржирж╛рж░ ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржЬрзАржмржиржХрзЗ ржЖрж░ржУ ржЙржирзНржиржд ржХрж░рзБржи`
        });
      }
    }

    // Product description generation mode
    if (body?.mode === 'product-description') {
      if (!apiKey) {
        return NextResponse.json({ error: "OpenAI API key required. Please add it in Settings тЖТ General." }, { status: 400 });
      }
      if (!body?.product?.name) {
        return NextResponse.json({ error: 'product.name required' }, { status: 400 });
      }
      
      console.log('ЁЯЪА AI API called for product-description:', { productName: body.product.name });
      
      const openai = new OpenAI({ apiKey, dangerouslyAllowBrowser: false });
      const prompt = `рждрзБржорж┐ ржПржХржЬржи ржорж╛рж░рзНржХрзЗржЯрж┐ржВ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮред ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржирж╛ржо ржжрзЗржЦрзЗ ржХрзЗржи ржХрзЗржЙ ржПржЗ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржХрж┐ржиржмрзЗ рждрж╛рж░ рззрзжржЯрж┐ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржХрж╛рж░ржг ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзЛред

ржкрзНрж░рзЛржбрж╛ржХрзНржЯ: ${body.product.name}

ржЖржЙржЯржкрзБржЯ рж╢рзБржзрзБржорж╛рждрзНрж░ JSON format-ржП ржжрж┐рждрзЗ рж╣ржмрзЗ:
{"description": "1. [ржкрзНрж░ржержо ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржХрж╛рж░ржг]\n2. [ржжрзНржмрж┐рждрзАржпрж╝ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржХрж╛рж░ржг]\n3. [рждрзГрждрзАржпрж╝ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржХрж╛рж░ржг]\n4. [ржЪрждрзБрж░рзНрже ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржХрж╛рж░ржг]\n5. [ржкржЮрзНржЪржо ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржХрж╛рж░ржг]\n6. [рж╖рж╖рзНржа ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржХрж╛рж░ржг]\n7. [рж╕ржкрзНрждржо ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржХрж╛рж░ржг]\n8. [ржЕрж╖рзНржЯржо ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржХрж╛рж░ржг]\n9. [ржиржмржо ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржХрж╛рж░ржг]\n10. [ржжрж╢ржо ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржХрж╛рж░ржг]"}

ржкрзНрж░рждрж┐ржЯрж┐ ржХрж╛рж░ржг ржпрзЗржи рж╕рзБржмрж┐ржзрж╛, ржмрзИрж╢рж┐рж╖рзНржЯрзНржп ржПржмржВ ржорзВрж▓рзНржп ржкрзНрж░рж╕рзНрждрж╛ржмрзЗрж░ ржЙржкрж░ ржлрзЛржХрж╛рж╕ ржХрж░рзЗред ржкрзНрж░рждрж┐ржЯрж┐ ржХрж╛рж░ржг ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржПржмржВ ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржЬржирзНржп ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╣рзЛржХред`;
      
      try {
        const res = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.7,
          max_tokens: 500
        });
        
        const text = res.choices[0]?.message?.content?.trim() || '{}';
        console.log('ЁЯУЭ OpenAI raw response:', text);
        
        // Try to extract JSON from the response
        let json: any = {};
        try {
          // Find JSON-like content in the response
          const jsonMatch = text.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            json = JSON.parse(jsonMatch[0]);
          } else {
            // Fallback: try to parse the entire response
            json = JSON.parse(text);
          }
        } catch (parseError) {
          console.error('тЭМ JSON parse error:', parseError);
          // Fallback: create a simple description
          json = {
            description: `1. ${body.product.name} ржПрж░ ржЕрж╕рж╛ржзрж╛рж░ржг ржЧрзБржгржорж╛ржи\n2. ржкрзНрж░рждрж┐ржпрзЛржЧрж┐рждрж╛ржорзВрж▓ржХ ржорзВрж▓рзНржпрзЗ рж╕рзЗрж░рж╛ ржорж╛ржи\n3. ржжрзНрж░рзБржд ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╕рж╛рж░рзНржнрж┐рж╕\n4. рзирзк/рзн ржХрж╛рж╕рзНржЯржорж╛рж░ рж╕рж╛ржкрзЛрж░рзНржЯ\n5. ржУржпрж╝рж╛рж░рзЗржирзНржЯрж┐ ржЧрзНржпрж╛рж░рж╛ржирзНржЯрж┐\n6. ржмрзНржпржмрж╣рж╛рж░рзЗ рж╕рж╣ржЬ ржПржмржВ рж╕рзБржмрж┐ржзрж╛ржЬржиржХ\n7. ржЖржзрзБржирж┐ржХ ржкрзНрж░ржпрзБржХрзНрждрж┐ ржмрзНржпржмрж╣рж╛рж░\n8. ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржм ржЙржкржХрж░ржг\n9. ржмрж╣рзБржорзБржЦрзА ржмрзНржпржмрж╣рж╛рж░ржпрзЛржЧрзНржпрждрж╛\n10. рж╕ржирзНрждрзБрж╖рзНржЯрж┐ ржЧрзНржпрж╛рж░рж╛ржирзНржЯрж┐`
          };
        }
        
        console.log('тЬЕ Parsed JSON:', json);
        
        const result = {
          description: json.description || `1. ${body.product.name} ржПрж░ ржЕрж╕рж╛ржзрж╛рж░ржг ржЧрзБржгржорж╛ржи\n2. ржкрзНрж░рждрж┐ржпрзЛржЧрж┐рждрж╛ржорзВрж▓ржХ ржорзВрж▓рзНржпрзЗ рж╕рзЗрж░рж╛ ржорж╛ржи\n3. ржжрзНрж░рзБржд ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╕рж╛рж░рзНржнрж┐рж╕\n4. рзирзк/рзн ржХрж╛рж╕рзНржЯржорж╛рж░ рж╕рж╛ржкрзЛрж░рзНржЯ\n5. ржУржпрж╝рж╛рж░рзЗржирзНржЯрж┐ ржЧрзНржпрж╛рж░рж╛ржирзНржЯрж┐\n6. ржмрзНржпржмрж╣рж╛рж░рзЗ рж╕рж╣ржЬ ржПржмржВ рж╕рзБржмрж┐ржзрж╛ржЬржиржХ\n7. ржЖржзрзБржирж┐ржХ ржкрзНрж░ржпрзБржХрзНрждрж┐ ржмрзНржпржмрж╣рж╛рж░\n8. ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржм ржЙржкржХрж░ржг\n9. ржмрж╣рзБржорзБржЦрзА ржмрзНржпржмрж╣рж╛рж░ржпрзЛржЧрзНржпрждрж╛\n10. рж╕ржирзНрждрзБрж╖рзНржЯрж┐ ржЧрзНржпрж╛рж░рж╛ржирзНржЯрж┐`
        };
        
        console.log('ЁЯОп Final result:', result);
        return NextResponse.json(result);
        
      } catch (openaiError) {
        console.error('ЁЯТе OpenAI API error:', openaiError);
        // Fallback response
        return NextResponse.json({
          description: `1. ${body.product.name} ржПрж░ ржЕрж╕рж╛ржзрж╛рж░ржг ржЧрзБржгржорж╛ржи\n2. ржкрзНрж░рждрж┐ржпрзЛржЧрж┐рждрж╛ржорзВрж▓ржХ ржорзВрж▓рзНржпрзЗ рж╕рзЗрж░рж╛ ржорж╛ржи\n3. ржжрзНрж░рзБржд ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╕рж╛рж░рзНржнрж┐рж╕\n4. рзирзк/рзн ржХрж╛рж╕рзНржЯржорж╛рж░ рж╕рж╛ржкрзЛрж░рзНржЯ\n5. ржУржпрж╝рж╛рж░рзЗржирзНржЯрж┐ ржЧрзНржпрж╛рж░рж╛ржирзНржЯрж┐\n6. ржмрзНржпржмрж╣рж╛рж░рзЗ рж╕рж╣ржЬ ржПржмржВ рж╕рзБржмрж┐ржзрж╛ржЬржиржХ\n7. ржЖржзрзБржирж┐ржХ ржкрзНрж░ржпрзБржХрзНрждрж┐ ржмрзНржпржмрж╣рж╛рж░\n8. ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржм ржЙржкржХрж░ржг\n9. ржмрж╣рзБржорзБржЦрзА ржмрзНржпржмрж╣рж╛рж░ржпрзЛржЧрзНржпрждрж╛\n10. рж╕ржирзНрждрзБрж╖рзНржЯрж┐ ржЧрзНржпрж╛рж░рж╛ржирзНржЯрж┐`
        });
      }
    }

    // Product features generation mode
    if (body?.mode === 'product-features') {
      if (!apiKey) {
        return NextResponse.json({ error: "OpenAI API key required. Please add it in Settings тЖТ General." }, { status: 400 });
      }
      if (!body?.product?.name) {
        return NextResponse.json({ error: 'product.name required' }, { status: 400 });
      }
      
      console.log('ЁЯЪА AI API called for product-features:', { productName: body.product.name });
      
      const openai = new OpenAI({ apiKey, dangerouslyAllowBrowser: false });
      const prompt = `рждрзБржорж┐ ржПржХржЬржи ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮред ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржирж╛ржо ржжрзЗржЦрзЗ ржПржЗ ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ рзмржЯрж┐ ржорзВрж▓ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзЛред

ржкрзНрж░рзЛржбрж╛ржХрзНржЯ: ${body.product.name}

ржЖржЙржЯржкрзБржЯ рж╢рзБржзрзБржорж╛рждрзНрж░ JSON format-ржП ржжрж┐рждрзЗ рж╣ржмрзЗ:
{"features": "1. [ржкрзНрж░ржержо ржмрзИрж╢рж┐рж╖рзНржЯрзНржп]\n2. [ржжрзНржмрж┐рждрзАржпрж╝ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп]\n3. [рждрзГрждрзАржпрж╝ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп]\n4. [ржЪрждрзБрж░рзНрже ржмрзИрж╢рж┐рж╖рзНржЯрзНржп]\n5. [ржкржЮрзНржЪржо ржмрзИрж╢рж┐рж╖рзНржЯрзНржп]\n6. [рж╖рж╖рзНржа ржмрзИрж╢рж┐рж╖рзНржЯрзНржп]"}

ржкрзНрж░рждрж┐ржЯрж┐ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржХрж┐ржирзНрждрзБ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ рж╣рждрзЗ рж╣ржмрзЗред`;
      
      try {
        const res = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.7,
          max_tokens: 300
        });
        
        const text = res.choices[0]?.message?.content?.trim() || '{}';
        console.log('ЁЯУЭ OpenAI raw response:', text);
        
        // Try to extract JSON from the response
        let json: any = {};
        try {
          // Find JSON-like content in the response
          const jsonMatch = text.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            json = JSON.parse(jsonMatch[0]);
          } else {
            // Fallback: try to parse the entire response
            json = JSON.parse(text);
          }
        } catch (parseError) {
          console.error('тЭМ JSON parse error:', parseError);
          // Fallback: create simple features
          json = {
            features: `1. ржЙржЪрзНржЪ ржорж╛ржирзЗрж░ ржЙржкржХрж░ржг\n2. ржжрзАрж░рзНржШрж╕рзНржерж╛ржпрж╝рзА ржмрзНржпржмрж╣рж╛рж░\n3. ржмрзНржпржмрж╣рж╛рж░рзЗ рж╕рж╣ржЬ\n4. ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржбрж┐ржЬрж╛ржЗржи\n5. ржкрзНрж░рждрж┐ржпрзЛржЧрж┐рждрж╛ржорзВрж▓ржХ ржорзВрж▓рзНржп\n6. ржмрж┐рж╢рзНржмрж╕рзНржд ржмрзНрж░рзНржпрж╛ржирзНржб`
          };
        }
        
        console.log('тЬЕ Parsed JSON:', json);
        
        const result = {
          features: json.features || `1. ржЙржЪрзНржЪ ржорж╛ржирзЗрж░ ржЙржкржХрж░ржг\n2. ржжрзАрж░рзНржШрж╕рзНржерж╛ржпрж╝рзА ржмрзНржпржмрж╣рж╛рж░\n3. ржмрзНржпржмрж╣рж╛рж░рзЗ рж╕рж╣ржЬ\n4. ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржбрж┐ржЬрж╛ржЗржи\n5. ржкрзНрж░рждрж┐ржпрзЛржЧрж┐рждрж╛ржорзВрж▓ржХ ржорзВрж▓рзНржп\n6. ржмрж┐рж╢рзНржмрж╕рзНржд ржмрзНрж░рзНржпрж╛ржирзНржб`
        };
        
        console.log('ЁЯОп Final result:', result);
        return NextResponse.json(result);
        
      } catch (openaiError) {
        console.error('ЁЯТе OpenAI API error:', openaiError);
        // Fallback response
        return NextResponse.json({
          features: `1. ржЙржЪрзНржЪ ржорж╛ржирзЗрж░ ржЙржкржХрж░ржг\n2. ржжрзАрж░рзНржШрж╕рзНржерж╛ржпрж╝рзА ржмрзНржпржмрж╣рж╛рж░\n3. ржмрзНржпржмрж╣рж╛рж░рзЗ рж╕рж╣ржЬ\n4. ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржбрж┐ржЬрж╛ржЗржи\n5. ржкрзНрж░рждрж┐ржпрзЛржЧрж┐рждрж╛ржорзВрж▓ржХ ржорзВрж▓рзНржп\n6. ржмрж┐рж╢рзНржмрж╕рзНржд ржмрзНрж░рзНржпрж╛ржирзНржб`
        });
      }
    }

    // Legacy description generation
    if (!name) {
      return NextResponse.json({ error: "name required" }, { status: 400 });
    }

    if (!apiKey) {
      return NextResponse.json({ 
        error: "OpenAI API key required. Please add it in Settings тЖТ General." 
      }, { status: 400 });
    }

    const openai = new OpenAI({ apiKey, dangerouslyAllowBrowser: false });

    const prompt = `
рждрзБржорж┐ ржПржХржЬржи ржЗ-ржХржорж╛рж░рзНрж╕ ржХржкрж┐рж░рж╛ржЗржЯрж╛рж░ред ржирж┐ржЪрзЗрж░ ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржЬржирзНржп ржмрж╛ржВрж▓рж╛ржпрж╝ SEO-ржлрзНрж░рзЗржирзНржбрж▓рж┐, 80-120 рж╢ржмрзНржжрзЗрж░ ржмрж░рзНржгржирж╛ рж▓рзЗржЦрзЛред
- ржирж╛ржо: ${name}
- ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐: ${category ?? "General"}
- Key points: ${keyPoints?.join(", ") ?? "N/A"}
- ржЯрзЛржи: ${tone}
- Avoid medical/false claims. Keep scannable.
ржЖржЙржЯржкрзБржЯ: ржПржХржЯрж┐ ржЕржирзБржЪрзНржЫрзЗржж, рж╢рзЗрж╖рзЗ 3-5ржЯрж┐ bullet key featuresред
    `;
    const res = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 300,
      temperature: 0.7
    });
    const description = res.choices[0]?.message?.content?.trim();
    if (!description) {
      return NextResponse.json({ error: "Failed to generate description. Please try again." }, { status: 500 });
    }
    return NextResponse.json({ description });
  } catch (error) {
    console.error('AI API Error:', error);
    if (error instanceof SyntaxError) {
      return NextResponse.json({ error: "Invalid request format. Please check your input." }, { status: 400 });
    }
    if (error instanceof Error) {
      if (error.message.includes('API key')) {
        return NextResponse.json({ error: "Invalid OpenAI API key. Please check your configuration." }, { status: 401 });
      }
      if (error.message.includes('rate limit')) {
        return NextResponse.json({ error: "Rate limit exceeded. Please try again later." }, { status: 429 });
      }
      if (error.message.includes('quota')) {
        return NextResponse.json({ error: "OpenAI quota exceeded. Please check your account." }, { status: 429 });
      }
    }
    return NextResponse.json({ error: "Internal server error. Please try again later." }, { status: 500 });
  }
}
